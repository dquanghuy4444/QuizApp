{"version":3,"sources":["Features/QuestionCard/Views/QuestionCardScreen.tsx","API.ts","Features/QuestionCard/Models/QuestionCard.ts","ultis.ts","App.tsx","index.tsx"],"names":["QuestionCardScreen","Difficulty","prop","className","q","questionNum","totalQuestions","dangerouslySetInnerHTML","__html","question","answers","map","answer","disabled","userAnswer","value","onClick","callback","fetchQuizQuestions","amount","difficulty","a","endPoint","fetch","response","json","data","results","arr","incorrect_answers","correct_answer","sort","Math","random","App","useState","isLoading","setIsLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","isGameOver","setIsGameOver","startTrivia","EASY","newQuestions","length","e","currentTarget","correct","prev","answerObject","correctAnswer","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNA0BeA,ICbHC,EDaGD,EAvBf,SAA4BE,GAE1B,OACE,gCACE,oBAAGC,UAAU,SAAb,yBEK2BC,EFJKF,EEK5B,GAAN,OAAUE,EAAEC,YAAZ,cAA6BD,EAAEE,oBFH7B,mBAAGC,wBAAyB,CAAEC,OAAQN,EAAKO,YAC3C,8BAEIP,EAAKQ,QAAQC,KAAI,SAAAC,GAAM,OACrB,8BACE,wBAAQC,SAAUX,EAAKY,WAAYC,MAAOH,EAAQI,QAASd,EAAKe,SAAhE,SACE,sBAAMV,wBAAyB,CAAEC,OAAQI,iBEJzB,IAACR,G,iBDCrBH,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAML,IAAMiB,EAAkB,uCAAG,WAAOC,EAAgBC,GAAvB,mBAAAC,EAAA,6DACxBC,EADwB,6CACyBH,EADzB,sBAC6CC,EAD7C,2BAEPG,MAAMD,GAFC,cAExBE,EAFwB,gBAGXA,EAASC,OAHE,cAGxBC,EAHwB,yBAIvBA,EAAKC,QAAQhB,KAAI,SAACF,GAAD,mBAAC,eAEdA,GAFa,IAGhBC,SE1BiBkB,EF0BK,GAAD,mBAAKnB,EAASoB,mBAAd,CAAkCpB,EAASqB,iBEzBxE,YAAIF,GAAKG,MAAK,kBAAMC,KAAKC,SAAU,SADX,IAACL,MFmBK,2CAAH,wDG6EhBM,MAlFf,WAAgB,IAAD,EAEsBC,oBAAS,GAF/B,mBAENC,EAFM,KAEMC,EAFN,OAGsBF,mBAA0B,IAHhD,mBAGNG,EAHM,KAGMC,EAHN,OAIgBJ,mBAAS,GAJzB,mBAINK,EAJM,KAIGC,EAJH,OAK0BN,mBAAyB,IALnD,mBAKNO,EALM,KAKQC,EALR,OAMcR,mBAAS,GANvB,mBAMNS,EANM,KAMEC,EANF,OAOwBV,oBAAS,GAPjC,mBAONW,EAPM,KAOOC,EAPP,KASPC,EAAW,uCAAG,4BAAA3B,EAAA,6DAClBgB,GAAa,GACbU,GAAc,GAFI,SAIS7B,EAfP,GAe4CjB,EAAWgD,MAJzD,OAIZC,EAJY,OAKlBX,EAAaW,GACbL,EAAS,GACTF,EAAe,IACfF,EAAU,GAEVJ,GAAa,GAVK,4CAAH,qDAwCjB,OACE,sBAAKlC,UAAU,MAAf,UACE,4CACE2C,GAtDgB,KAsDFJ,EAAYS,OAE1B,wBAAQhD,UAAU,QAAQa,QAAUgC,EAApC,mBAGE,MAGHF,GAAe,oBAAG3C,UAAU,QAAb,oBAA8ByC,KAE5CR,GAAa,qDAEZA,GAAcU,EAQU,KAPzB,cAAC,EAAD,CACAzC,YAAamC,EAAS,EACtBlC,eArEgB,GAsEhBG,SAAW6B,EAAUE,GAAQ/B,SAC7BC,QAAU4B,EAAUE,GAAQ9B,QAC5BO,SAhDc,SAACmC,GACnB,IAAIN,EAAW,CACb,IAAMlC,EAASwC,EAAEC,cAActC,MACzBuC,EAAUhB,EAAUE,GAAQV,iBAAmBlB,EACrD0C,GAAWT,GAAS,SAAAU,GAAI,OAAIA,EAAO,KAEnC,IAAMC,EAAe,CACnB/C,SAAW6B,EAAUE,GAAQ/B,SAC7BG,SACA0C,UACAG,cAAenB,EAAUE,GAAQV,gBAGnCa,GAAe,SAAAY,GAAI,4BAAQA,GAAR,CAAeC,SAoChC1C,WAAY4B,EAAcA,EAAYF,QAAUkB,IAIlD,wBAAQvD,UAAU,OAAOa,QApCR,WAzCC,KA0CIwB,EAAS,EAE/BO,GAAc,GAEdN,GAAU,SAAAc,GAAI,OAAIA,EAAO,MA+BzB,+BCpFNI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d2b925e2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { QuestionCardModel , getRatioQuestion } from '../Models/QuestionCard';\r\n\r\nfunction QuestionCardScreen(prop : QuestionCardModel) {\r\n\r\n  return (\r\n    <div>\r\n      <p className=\"number\">\r\n        Question : { getRatioQuestion(prop) }\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: prop.question }}></p>\r\n      <div>\r\n        {\r\n          prop.answers.map(answer =>(\r\n            <div>\r\n              <button disabled={prop.userAnswer} value={answer} onClick={prop.callback}>\r\n                <span dangerouslySetInnerHTML={{ __html: answer }}></span>\r\n              </button>\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionCardScreen;\r\n","import { shuffleArray } from './ultis';\r\n\r\nexport type Question = {\r\n    category : string,\r\n    correct_answer:string,\r\n    difficulty: string,\r\n    incorrect_answers: string[],\r\n    question: string,\r\n    type:string\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty{\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount:number , difficulty :Difficulty)=>{\r\n    const endPoint = `https://opentdb.com/api.php?amount=${amount}&diffculty=${difficulty}&type=multiple`;\r\n    const response = await fetch(endPoint);\r\n    const data = await response.json();\r\n    return data.results.map((question:Question) =>(\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([...question.incorrect_answers , question.correct_answer])\r\n        }\r\n    ));\r\n}","import React from 'react';\r\n\r\nexport interface QuestionCardModel {\r\n    question: string,\r\n    answers: string[],\r\n    callback: any,\r\n    userAnswer: any,\r\n    questionNum: number,\r\n    totalQuestions: number,\r\n}\r\n\r\n\r\nexport const getRatioQuestion = (q: QuestionCardModel) :string => {\r\n    return `${q.questionNum} / ${q.totalQuestions}`;\r\n}\r\n\r\n\r\n","export const shuffleArray = (arr:any[]):any =>(\r\n    [...arr].sort(() => Math.random() -0.5)\r\n)","import React, { useState } from 'react';\nimport './App.css';\nimport QuestionCardScreen from './Features/QuestionCard/Views/QuestionCardScreen';\nimport { fetchQuizQuestions , Difficulty , QuestionState } from './API';\n\ntype AnswerObject = {\n  question : string,\n  answer: string,\n  correct: boolean,\n  correctAnswer : string,\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n\n  const [isLoading , setIsLoading] = useState(false);\n  const [questions , setQuestions] = useState<QuestionState[]>([]);\n  const [number , setNumber] = useState(0);\n  const [userAnswers , setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score , setScore] = useState(0);\n  const [isGameOver , setIsGameOver] = useState(true);\n\n  const startTrivia = async () =>{\n    setIsLoading(true);\n    setIsGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS , Difficulty.EASY);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n\n    setIsLoading(false);\n  }\n\n  const checkAnswer = (e : React.MouseEvent<HTMLButtonElement>) =>{\n    if(!isGameOver){\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      correct || setScore(prev => prev + 1);\n\n      const answerObject = {\n        question : questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n\n      setUserAnswers(prev => [...prev , answerObject]);\n    }\n  }\n\n  const nextQuestion = () =>{\n    const nextNumQuestion = number + 1;\n    if(nextNumQuestion === TOTAL_QUESTIONS){\n      setIsGameOver(true);\n    } else{\n      setNumber(prev => prev + 1);\n    }\n \n  }\n\n  return (\n    <div className=\"App\">\n      <h1>React Quiz</h1>\n      { isGameOver || userAnswers.length === TOTAL_QUESTIONS ?\n      (      \n        <button className=\"start\" onClick={ startTrivia }>\n          Start\n        </button>\n      ) : null\n      }\n\n    { !isGameOver || (<p className=\"score\">Score: { score }</p>) }\n      \n      { isLoading && <p >Loading Question ...</p> }\n\n      { !isLoading && !isGameOver ?\n        <QuestionCardScreen \n        questionNum={number + 1} \n        totalQuestions={TOTAL_QUESTIONS}\n        question={ questions[number].question }  \n        answers={ questions[number].answers } \n        callback={checkAnswer} \n        userAnswer={userAnswers ? userAnswers[number] : undefined }\n        ></QuestionCardScreen> : null\n      }\n    \n      <button className=\"next\" onClick={ nextQuestion }>\n        Next Question\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}