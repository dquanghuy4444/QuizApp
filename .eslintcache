[{"D:\\pohip\\temp\\react_typescript\\quizapp\\src\\index.tsx":"1","D:\\pohip\\temp\\react_typescript\\quizapp\\src\\App.tsx":"2","D:\\pohip\\temp\\react_typescript\\quizapp\\src\\Features\\QuestionCard\\Models\\QuestionCard.ts":"3","D:\\pohip\\temp\\react_typescript\\quizapp\\src\\Features\\QuestionCard\\Views\\QuestionCardScreen.tsx":"4","D:\\pohip\\temp\\react_typescript\\quizapp\\src\\ultis.ts":"5","D:\\pohip\\temp\\react_typescript\\quizapp\\src\\Features\\SettingQuestion\\Views\\SettingQuestionScreen.tsx":"6","D:\\pohip\\temp\\react_typescript\\quizapp\\src\\Features\\SettingQuestion\\Models\\SettingQuestion.ts":"7","D:\\pohip\\temp\\react_typescript\\quizapp\\src\\Features\\QuestionArea\\Models\\QuestionArea.ts":"8","D:\\pohip\\temp\\react_typescript\\quizapp\\src\\Features\\QuestionArea\\Views\\QuestionAreaScreen.tsx":"9"},{"size":197,"mtime":1606465965409,"results":"10","hashOfConfig":"11"},{"size":2674,"mtime":1606499026749,"results":"12","hashOfConfig":"11"},{"size":288,"mtime":1606550195732,"results":"13","hashOfConfig":"11"},{"size":1104,"mtime":1606571363147,"results":"14","hashOfConfig":"11"},{"size":95,"mtime":1606460866333,"results":"15","hashOfConfig":"11"},{"size":3937,"mtime":1606497711437,"results":"16","hashOfConfig":"11"},{"size":146,"mtime":1606495758032,"results":"17","hashOfConfig":"11"},{"size":1499,"mtime":1606555696512,"results":"18","hashOfConfig":"11"},{"size":2340,"mtime":1606570185611,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"17gabw7",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"D:\\pohip\\temp\\react_typescript\\quizapp\\src\\index.tsx",[],["44","45"],"D:\\pohip\\temp\\react_typescript\\quizapp\\src\\App.tsx",["46"],"import React, { useState } from 'react';\nimport './App.css';\nimport SettingQuestionScreen from './Features/SettingQuestion/Views/SettingQuestionScreen';\nimport { Setting } from '../src/Features/SettingQuestion/Models/SettingQuestion';\nimport QuestionAreaScreen from './Features/QuestionArea/Views/QuestionAreaScreen';\n\ntype AnswerObject = {\n  question : string,\n  answer: string,\n  correct: boolean,\n  correctAnswer : string,\n}\n\nfunction App() {\n\n  const [isSettingScreen , setIsSettingScreen] = useState(true);\n\n  const [setting , setSetting] = useState<Setting>({\n    totalQuestions : 10,\n    category:\"any\",\n    difficulty:\"any\",\n    type:\"any\"\n  });\n\n  // const startTrivia = async () =>{\n  //   const newQuestions = await fetchQuizQuestions(setting);\n  //   console.log(newQuestions);\n  // }\n\n  // !isSettingScreen && startTrivia();\n\n  // const [questions , setQuestions] = useState<QuestionState[]>([]);\n  // const [number , setNumber] = useState(0);\n  // const [userAnswers , setUserAnswers] = useState<AnswerObject[]>([]);\n  // const [score , setScore] = useState(0);\n  // const [isGameOver , setIsGameOver] = useState(true);\n\n  // const startTrivia = async () =>{\n  //   setIsLoading(true);\n  //   setIsGameOver(false);\n\n  //   const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS , Difficulty.EASY);\n  //   setQuestions(newQuestions);\n  //   setScore(0);\n  //   setUserAnswers([]);\n  //   setNumber(0);\n\n  //   setIsLoading(false);\n  // }\n\n  // const checkAnswer = (e : React.MouseEvent<HTMLButtonElement>) =>{\n  //   if(!isGameOver){\n  //     const answer = e.currentTarget.value;\n  //     const correct = questions[number].correct_answer === answer;\n  //     correct || setScore(prev => prev + 1);\n\n  //     const answerObject = {\n  //       question : questions[number].question,\n  //       answer,\n  //       correct,\n  //       correctAnswer: questions[number].correct_answer,\n  //     };\n\n  //     setUserAnswers(prev => [...prev , answerObject]);\n  //   }\n  // }\n\n  // const nextQuestion = () =>{\n  //   const nextNumQuestion = number + 1;\n  //   if(nextNumQuestion === TOTAL_QUESTIONS){\n  //     setIsGameOver(true);\n  //   } else{\n  //     setNumber(prev => prev + 1);\n  //   }\n \n  // }\n\n  return (\n    <>\n      <h1 className=\"text-center\">Quiz App</h1>\n      <div className=\"main\">\n          { isSettingScreen ?\n            <SettingQuestionScreen setting={ setting } setSetting={ setSetting } setIsSettingScreen={ setIsSettingScreen }></SettingQuestionScreen> : \n            <QuestionAreaScreen setIsSettingScreen={ setIsSettingScreen } setting={ setting }></QuestionAreaScreen>\n          }     \n      </div>\n    </>\n  );\n}\n\nexport default App;\n",["47","48"],"D:\\pohip\\temp\\react_typescript\\quizapp\\src\\Features\\QuestionCard\\Models\\QuestionCard.ts",["49"],"D:\\pohip\\temp\\react_typescript\\quizapp\\src\\Features\\QuestionCard\\Views\\QuestionCardScreen.tsx",["50","51","52"],"import React, { useEffect, useState } from 'react';\r\nimport { QuestionCardModel  } from '../Models/QuestionCard';\r\nimport { QuestionState  } from './../../QuestionArea/Models/QuestionArea';\r\n\r\ntype Props = {\r\n  question:QuestionState,\r\n  score:number,\r\n  setScore:React.Dispatch<React.SetStateAction<number>>,\r\n  setNumQuestionFunc:any,\r\n  totalQuestions:number\r\n};\r\n\r\nconst QuestionCardScreen : React.FC<Props> = ({question , score , setScore , setNumQuestionFunc , totalQuestions}) =>{\r\n  console.log(question);\r\n  const {  answers } = question;\r\n\r\n  const setMyAnswer = (myAnswer : string) =>{\r\n    if(myAnswer === question.correct_answer){\r\n      setScore(score + 1);\r\n    }\r\n    setNumQuestionFunc()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3 dangerouslySetInnerHTML={{__html: question.question }} />\r\n      <div className=\"row\">\r\n        {\r\n          answers.map((answer:string) => <button className=\"btn btn-primary col-6 mt-2 \" style={{ height : \"50px\" }} onClick={ () =>{setMyAnswer(answer)}}>{answer}</button>)\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionCardScreen;\r\n","D:\\pohip\\temp\\react_typescript\\quizapp\\src\\ultis.ts",[],"D:\\pohip\\temp\\react_typescript\\quizapp\\src\\Features\\SettingQuestion\\Views\\SettingQuestionScreen.tsx",["53","54","55"],"import React, { useState } from 'react';\r\nimport './SettingQuestionScreen.css';\r\nimport { Setting } from './../Models/SettingQuestion';\r\n\r\nfunction SettingQuestionScreen(prop : any ) {\r\n\r\n    const { setting , setSetting , setIsSettingScreen } = prop;\r\n\r\n    const startAnswer = () =>{\r\n        setIsSettingScreen(false)\r\n    }\r\n\r\n    const changeTotalQuestions =(e : React.ChangeEvent<HTMLInputElement>) :void =>{\r\n        setSetting({...setting,totalQuestions:parseInt(e.currentTarget.value)});\r\n    }\r\n\r\n    const changeCategory =(e : React.ChangeEvent<HTMLSelectElement>) :void =>{\r\n        setSetting({...setting,category:e.currentTarget.value});\r\n    }\r\n\r\n    const changeDifficulty =(e : React.ChangeEvent<HTMLSelectElement>) :void =>{\r\n        setSetting({...setting,difficulty:e.currentTarget.value});\r\n    }\r\n\r\n    const changeType =(e : React.ChangeEvent<HTMLSelectElement>) :void =>{\r\n        setSetting({...setting,type:e.currentTarget.value});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"total\">Số lượng câu hỏi</label>\r\n                <input type=\"number\" className=\"form-control\" value={ setting.totalQuestions } \r\n                onChange={ changeTotalQuestions } min=\"3\" max=\"15\"></input>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"category\">Đề tài</label>\r\n                <select className=\"form-control\" value={ setting.category } onChange={ changeCategory }>\r\n                    <option value=\"any\">Tất cả đề tài</option>\r\n                    <option value=\"9\">General Knowledge</option><option value=\"10\">Entertainment: Books</option><option value=\"11\">Entertainment: Film</option><option value=\"12\">Entertainment: Music</option><option value=\"13\">Entertainment: Musicals &amp; Theatres</option><option value=\"14\">Entertainment: Television</option><option value=\"15\">Entertainment: Video Games</option><option value=\"16\">Entertainment: Board Games</option><option value=\"17\">Science &amp; Nature</option><option value=\"18\">Science: Computers</option><option value=\"19\">Science: Mathematics</option><option value=\"20\">Mythology</option><option value=\"21\">Sports</option><option value=\"22\">Geography</option><option value=\"23\">History</option><option value=\"24\">Politics</option><option value=\"25\">Art</option><option value=\"26\">Celebrities</option><option value=\"27\">Animals</option><option value=\"28\">Vehicles</option><option value=\"29\">Entertainment: Comics</option><option value=\"30\">Science: Gadgets</option><option value=\"31\">Entertainment: Japanese Anime &amp; Manga</option><option value=\"32\">Entertainment: Cartoon &amp; Animations</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"difficulty\">Độ khó</label>\r\n                <select className=\"form-control\" onChange={ changeDifficulty } value={ setting. difficulty }>\r\n                    <option value=\"any\">Tất cả độ khó</option>\r\n                    <option value=\"easy\">Easy</option>\r\n                    <option value=\"medium\">Medium</option>\r\n                    <option value=\"hard\">Hard</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"type\">Loại câu hỏi</label>\r\n                <select className=\"form-control\" onChange={ changeType } value={ setting.type }>\r\n                    <option value=\"any\">Tất cả các loại câu hỏi</option>\r\n                    <option value=\"multiple\">Multiple Choice</option>\r\n                    <option value=\"boolean\">True / False</option>\r\n                </select>\r\n            </div>\r\n            <button className=\"btn btn-primary\" style={{ width : \"100%\" }} onClick={ startAnswer } >Bắt đầu</button>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SettingQuestionScreen;\r\n","D:\\pohip\\temp\\react_typescript\\quizapp\\src\\Features\\SettingQuestion\\Models\\SettingQuestion.ts",[],"D:\\pohip\\temp\\react_typescript\\quizapp\\src\\Features\\QuestionArea\\Models\\QuestionArea.ts",[],"D:\\pohip\\temp\\react_typescript\\quizapp\\src\\Features\\QuestionArea\\Views\\QuestionAreaScreen.tsx",["56","57"],"import React, { useEffect, useState } from 'react';\r\nimport QuestionCardScreen from '../../QuestionCard/Views/QuestionCardScreen';\r\nimport { fetchQuizQuestions , QuestionState } from '../Models/QuestionArea';\r\nimport './QuestionAreaScreen.css';\r\n\r\nfunction QuestionAreaScreen(prop : any) {\r\n  const { setIsSettingScreen , setting } = prop;\r\n  const [isFinalScreen , setIsFinalScreen] = useState(false);\r\n\r\n  const [questions , setQuestions] = useState([]);\r\n  const [score , setScore] = useState(0);\r\n  const [numQuestion , setNumQuestion] = useState(0);\r\n  const [isLoading , setIsLoading] = useState(true);\r\n\r\n  useEffect(() =>{\r\n    let isActive = true\r\n\r\n    const startTrivia = async () =>{\r\n      const newQuestions = await fetchQuizQuestions(setting);\r\n      if(isActive){\r\n        console.log(newQuestions);\r\n        setQuestions(newQuestions);\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n\r\n    startTrivia();\r\n\r\n    return () =>{\r\n      isActive = false;\r\n    };\r\n\r\n  },[])\r\n  \r\n\r\n  if(isLoading){\r\n    return (\r\n      <h3 className=\"text-center mt-3\">Loading ...</h3>\r\n    )\r\n  }\r\n\r\n  const setNumQuestionFunc = () =>{\r\n    if(numQuestion + 1 !== setting.totalQuestions){\r\n      setNumQuestion(numQuestion + 1);\r\n    }else{\r\n      setIsFinalScreen(true);\r\n    }\r\n  }\r\n  if(isFinalScreen){\r\n    return (\r\n      <div className=\"text-center\">\r\n        <h2>\r\n          Bạn đã đạt { score } / { setting.totalQuestions } điểm\r\n        </h2>\r\n        <button onClick={ () => setIsSettingScreen(true) } className=\"btn btn-primary\">Quay lại</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"body-questionarea\">\r\n        <QuestionCardScreen question={ questions[numQuestion] }\r\n          score={ score }\r\n          setScore={ setScore }\r\n          setNumQuestionFunc={ setNumQuestionFunc }\r\n          totalQuestions={ setting.totalQuestions }\r\n        ></QuestionCardScreen>\r\n      </div>\r\n      <h3 className=\"text-center\">Score : { score }</h3>\r\n      <div className=\"header-questionarea\">\r\n        <button onClick={ setNumQuestionFunc } className=\"btn btn-success float-left\">Bỏ qua</button>\r\n        <button onClick={ () => setIsSettingScreen(true) } className=\"btn btn-primary float-right\">Quay lại</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionAreaScreen;\r\n",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":7,"column":6,"nodeType":"64","messageId":"65","endLine":7,"endColumn":18},{"ruleId":"58","replacedBy":"66"},{"ruleId":"60","replacedBy":"67"},{"ruleId":"62","severity":1,"message":"68","line":1,"column":8,"nodeType":"64","messageId":"65","endLine":1,"endColumn":13},{"ruleId":"62","severity":1,"message":"69","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":26},{"ruleId":"62","severity":1,"message":"70","line":1,"column":28,"nodeType":"64","messageId":"65","endLine":1,"endColumn":36},{"ruleId":"62","severity":1,"message":"71","line":2,"column":10,"nodeType":"64","messageId":"65","endLine":2,"endColumn":27},{"ruleId":"62","severity":1,"message":"70","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":25},{"ruleId":"62","severity":1,"message":"72","line":3,"column":10,"nodeType":"64","messageId":"65","endLine":3,"endColumn":17},{"ruleId":"73","severity":1,"message":"74","line":45,"column":88,"nodeType":"75","messageId":"76","endLine":45,"endColumn":107,"fix":"77"},{"ruleId":"62","severity":1,"message":"78","line":3,"column":31,"nodeType":"64","messageId":"65","endLine":3,"endColumn":44},{"ruleId":"79","severity":1,"message":"80","line":33,"column":5,"nodeType":"81","endLine":33,"endColumn":7,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"@typescript-eslint/no-unused-vars","'AnswerObject' is defined but never used.","Identifier","unusedVar",["83"],["84"],"'React' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'QuestionCardModel' is defined but never used.","'Setting' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property difficulty.","MemberExpression","unexpectedWhitespace",{"range":"85","text":"86"},"'QuestionState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setting'. Either include it or remove the dependency array.","ArrayExpression",["87"],"no-global-assign","no-unsafe-negation",[2938,2940],".",{"desc":"88","fix":"89"},"Update the dependencies array to be: [setting]",{"range":"90","text":"91"},[982,984],"[setting]"]